#!/usr/bin/env node
/* vim: set ft=javascript: */
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2016, Joyent, Inc.
 */

/*
 * fastserve: command-line fast server for demo and testing
 */

var mod_assertplus = require('assert-plus');
var mod_bunyan = require('bunyan');
var mod_cmdutil = require('cmdutil');
var mod_fastdemo = require('../lib/demo_server');
var mod_fastserver = require('../lib/fast_server');
var mod_net = require('net');

var usageMessage = [
    'Start a Fast protocol server supporting a few basic RPC calls.  PORT is ',
    'the TCP port on which to listen.'
].join('\n');

function main()
{
	var argv, port;

	mod_cmdutil.configure({
	    'synopses': [ 'PORT' ],
	    'usageMessage': usageMessage
	});
	mod_cmdutil.exitOnEpipe();

	argv = process.argv.slice(2);
	if (argv.length != 1) {
		mod_cmdutil.usage('expected PORT');
	}

	port = parseInt(argv[0], 10);
	if (isNaN(port) || port < 1 || port > 65535) {
		mod_cmdutil.usage('invalid TCP port: %s\n', argv[1]);
	}

	fastDemoServer({ 'port': port });
}

function fastDemoServer(args)
{
	var port, log, sock, fastserver;

	mod_assertplus.object(args, 'args');
	mod_assertplus.number(args.port, 'args.port');

	log = new mod_bunyan({
	    'name': 'fastserve',
	    'level': process.env['LOG_LEVEL'] || 'trace'
	});

	log.info('starting fast server');
	sock = mod_net.createServer({ 'allowHalfOpen': true });
	fastserver = new mod_fastserver.FastServer({
	    'log': log,
	    'server': sock
	});

	mod_fastdemo.demoRpcs().forEach(function (r) {
		fastserver.registerRpcMethod(r);
	});

	port = args.port;
	sock.listen(port, function () {
		var nsigs = 0;

		log.info({ 'port': port }, 'listening');

		process.on('SIGINT', function () {
			if (++nsigs == 1) {
				sock.close();
				fastserver.close();
			}
		});
	});
}

main();
